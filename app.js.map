{"version":3,"file":"app.js","mappings":"uBAAIA,E,iBCAJ,OACA,eACA,SAEA,MAAMC,UAAaC,OAAOD,KACtBE,cACIC,MAAoC,CAChCC,MAAO,IACPC,OAAQ,IACRC,KAAML,OAAOM,MACbC,OAAQ,UACRC,QAAS,CACLC,QAAS,UAEbC,MAAO,CACHC,KAAMX,OAAOY,MAAMC,IACnBC,WAAYd,OAAOY,MAAMG,aAE7BC,SAAU,CACNC,QAAA,EAAAA,SAEJC,MAAO,CACH,EAAAC,YACA,EAAAC,cAMhB,IAAIrB,G,YC7BJ,IAAKsB,E,iDAAL,SAAKA,GACD,0BADJ,CAAKA,IAAAA,EAAS,KAId,UAAeA,G,YCJf,IAAKC,E,iDAAL,SAAKA,GACD,uCACA,8BACA,iCACA,+BACA,0BACA,gBANJ,CAAKA,IAAAA,EAAK,KASV,UAAeA,G,YCTf,IAAKC,E,iDAAL,SAAKA,GACD,qBADJ,CAAKA,IAAAA,EAAQ,KAIb,UAAeA,G,WCJf,IAAKC,E,iDAAL,SAAKA,GACD,8BACA,0BAFJ,CAAKA,IAAAA,EAAK,KAKV,UAAeA,G,sMCLf,aAAS,8EAAAf,WACT,aAAS,0EAAAA,WACT,aAAS,6EAAAA,WACT,YAAS,0EAAAA,Y,+DCHT,cA0IA,MAAqBQ,UAAgBjB,OAAOyB,SAASC,MAAMC,UAAUC,eACjE3B,YAAY4B,GACR3B,MAAM,CACF2B,KAAAA,EACAC,KAAM,EAAAP,SAASQ,SACfC,WA5IO,y5GAuInB,a,0KC1IA,aAAS,4EAAAvB,Y,+DCAT,cAkBA,UAAiC,CAC7B,CACIJ,KAAM,QACNyB,KAAM,EAAAR,MAAMW,cACZC,KAAM,4BAEV,CACI7B,KAAM,QACNyB,KAAM,EAAAR,MAAMa,eACZD,KAAM,6BAEV,CACI7B,KAAM,QACNyB,KAAM,EAAAR,MAAMa,eACZD,KAAM,6BAEV,CACI7B,KAAM,QACNyB,KAAM,EAAAR,MAAMc,WACZF,KAAM,yBAEV,CACI7B,KAAM,cACNyB,KAAM,EAAAR,MAAMe,MACZH,KAAM,mBACNI,YAAa,CACTC,WAAY,GACZC,YAAa,KAGrB,CACInC,KAAM,QACNyB,KAAM,EAAAR,MAAMmB,oBACZP,KAAM,6BAEV,CACI7B,KAAM,cACNyB,KAAM,EAAAR,MAAMoB,aACZR,KAAM,0BACNS,SAAU,6B,6DCjDlB,UAAgC,CAC5B,CACIC,KAAM,iBACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,UAAW,KAEf,CACIJ,KAAM,oBACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,UAAW,KAEf,CACIJ,KAAM,qBACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,UAAW,KAEf,CACIJ,KAAM,iBACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,UAAW,O,yLCnCnB,aAAS,+EAAAvC,WACT,aAAS,8EAAAA,Y,+DCDT,cACA,SAEA,MAAqBU,UAAoBnB,OAAOwB,MAC5CvB,cACIC,MAAM,EAAAsB,MAAMyB,cAGTC,UACH,MAGMC,EAAcC,KAAKC,IAAIC,WAC7BH,EAAYI,UAAU,QAAU,IAChCJ,EAAYK,SAAS,IAA0B,IALjC,IACC,IAMf,MAAMC,EAAcL,KAAKC,IAAIC,WAE7BF,KAAKM,KAAKC,GAAG,YAAaC,IACtBH,EAAYI,QACZJ,EAAYF,UAAU,SAAU,GAChCE,EAAYD,SAAS,IAAiC,IAAmC,IAAeI,EAAOxD,OAGnHgD,KAAKM,KAAKC,GAAG,YAAY,KACrBP,KAAKlC,MAAM4C,MAAM,EAAAtC,MAAMuC,eAG3B,EAAAC,WAAWC,SAAQC,IACf,OAAQA,EAAE7D,MACN,IAAK,QACD+C,KAAKM,KAAKS,MAAMD,EAAEpC,KAAMoC,EAAEhC,MAC1B,MACJ,IAAK,QACDkB,KAAKM,KAAKU,MAAMF,EAAEpC,KAAMoC,EAAEhC,MAC1B,MACJ,IAAK,cACDkB,KAAKM,KAAKW,YAAYH,EAAEpC,KAAMoC,EAAEhC,KAAMgC,EAAE5B,aACxC,MACJ,IAAK,cACDc,KAAKM,KAAKY,WAAWJ,EAAEpC,KAAMoC,EAAEhC,KAAMgC,EAAEvB,eArC3D,a,+DCHA,cACA,SAEA,MAAqBvB,UAAkBpB,OAAOwB,MAQ1CvB,cACIC,MAAM,EAAAsB,MAAMuC,YARR,KAAAQ,YAAc,EAKd,KAAAC,WAAa,EAMdC,SACHrB,KAAKsB,gBACLtB,KAAKuB,WACLvB,KAAKwB,WACLxB,KAAKyB,UACLzB,KAAK0B,cAGFC,SACH3B,KAAK4B,mBAGDA,mBACA5B,KAAK6B,gBAAe7B,KAAK6B,cAAcC,eAAiB9B,KAAKmB,YAAc,GAC3EnB,KAAK+B,iBAAgB/B,KAAK+B,eAAeD,eAAiB9B,KAAKmB,YAAc,GAC7EnB,KAAKgC,uBAAsBhC,KAAKgC,qBAAqBF,eAAiB9B,KAAKmB,YAAc,GAGzFO,cACJ1B,KAAKiC,QAAQC,KAAKC,gBAAgB,EAAAhE,SAASQ,UAGvC8C,UACJzB,KAAKR,KAAOQ,KAAKC,IAAImC,kBAAkB,IAAkB,IAAiB,EAAAlE,MAAMoB,cAC3E+C,QAAQ,IACRC,YAAY,IACZC,UAAU,GAAK,IACfC,iBAELxC,KAAKyC,WAGDA,WACJ,MAAMC,EAAQ,EAAAC,UAAU3C,KAAKoB,YAE7BpB,KAAK4C,OAAOC,SAAS,CACjBC,QAAS9C,KAAKR,KACdoD,OAAQ,CAEJ,CACIG,EAAG,IACHC,SAAUN,EAAMjD,OAGpB,CACIsD,EAAG,IACHC,SAAUN,EAAMhD,QAGpB,CACIqD,EAAG,IACHC,SAAUN,EAAM/C,MAGpB,CACIoD,GAAG,IACHC,SAAUN,EAAM9C,YAGxBqD,QAAS,KACDjD,KAAKR,MAAMQ,KAAKR,KAAK0D,KAAK,KAAkBb,QAAQK,EAAMlD,OAElE2D,WAAY,KACJnD,KAAKR,OACLQ,KAAKR,KAAK0D,MAAK,KACflD,KAAKoB,aACD,EAAAuB,UAAUS,QAAUpD,KAAKoB,aACzBpB,KAAKoB,WAAa,GAGtBpB,KAAKyC,eAMbjB,WACJxB,KAAKqD,MAAMC,KAAK,EAAApF,MAAMmB,qBAGlBkC,WACJvB,KAAKuD,MAAMlC,OAAO,CACdmC,IAAK,EAAAvF,UAAUwF,WACfC,OAAQ1D,KAAKuD,MAAMI,qBAAqB,EAAAzF,MAAMe,MAAO,CAAEyB,MAAO,EAAGkD,IAAK,EAAGC,MAAO,IAChFC,UAAW,GACXC,QAAS,IAGb/D,KAAKC,IAAI+D,OAAO,IAAgB,IAAkB,EAAA9F,MAAMe,OACnDqE,KAAK,EAAArF,UAAUwF,YACfQ,SAAS,GAGV3C,gBACJtB,KAAK6B,cAAgB7B,KAAKkE,oBAAoB,EAAAhG,MAAMW,cAAe,IAAK,KACxEmB,KAAK+B,eAAiB/B,KAAKkE,oBAAoB,EAAAhG,MAAMa,eAAgB,IAAK,KAC1EiB,KAAKgC,qBAAuBhC,KAAKkE,oBAAoB,EAAAhG,MAAMc,WAAY,IAAK,KACvEmF,KAAK,GAGND,oBAAoBE,EAAeC,EAAsBC,GAC7D,MAAMC,EAAc,IAAaF,EAC3BG,EAAe,IAAcF,EAC7BG,EAASC,KAAKC,IAAIJ,EAAaC,GAErC,OAAOxE,KAAKC,IAAI2E,WAAW,EAAG,EAAG,IAAY,IAAaR,GACrDH,SAASQ,GACTlC,UAAU,EAAK,IAvH5B,a,0LCHA,aAAS,gFAAAlF,WACT,aAAS,8EAAAA,aCALwH,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUM,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAGpEK,EAAOD,QAIfJ,EAAoBQ,EAAIF,EfzBpB1I,EAAW,GACfoI,EAAoBS,EAAI,CAACC,EAAQC,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,EAAAA,EACnB,IAASC,EAAI,EAAGA,EAAIpJ,EAAS0G,OAAQ0C,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYjJ,EAASoJ,GACpCC,GAAY,EACPC,EAAI,EAAGA,EAAIP,EAASrC,OAAQ4C,MACpB,EAAXL,GAAsBC,GAAgBD,IAAaM,OAAOC,KAAKpB,EAAoBS,GAAGY,OAAO3C,GAASsB,EAAoBS,EAAE/B,GAAKiC,EAASO,MAC9IP,EAASW,OAAOJ,IAAK,IAErBD,GAAY,EACTJ,EAAWC,IAAcA,EAAeD,IAG7C,GAAGI,EAAW,CACbrJ,EAAS0J,OAAON,IAAK,GACrB,IAAIO,EAAIX,SACET,IAANoB,IAAiBb,EAASa,IAGhC,OAAOb,EAvBNG,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAIpJ,EAAS0G,OAAQ0C,EAAI,GAAKpJ,EAASoJ,EAAI,GAAG,GAAKH,EAAUG,IAAKpJ,EAASoJ,GAAKpJ,EAASoJ,EAAI,GACrGpJ,EAASoJ,GAAK,CAACL,EAAUC,EAAIC,IgBL/Bb,EAAoBhE,EAAI,CAACwF,EAAKC,IAAUN,OAAOO,UAAUC,eAAepB,KAAKiB,EAAKC,G,MCKlF,IAAIG,EAAkB,CACrB,IAAK,GAaN5B,EAAoBS,EAAES,EAAKW,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BC,KACvD,IAGI/B,EAAU4B,GAHTlB,EAAUsB,EAAaC,GAAWF,EAGhBhB,EAAI,EAC3B,GAAGL,EAASwB,MAAMC,GAAgC,IAAxBR,EAAgBQ,KAAa,CACtD,IAAInC,KAAYgC,EACZjC,EAAoBhE,EAAEiG,EAAahC,KACrCD,EAAoBQ,EAAEP,GAAYgC,EAAYhC,IAGhD,GAAGiC,EAAS,IAAIxB,EAASwB,EAAQlC,GAGlC,IADG+B,GAA4BA,EAA2BC,GACrDhB,EAAIL,EAASrC,OAAQ0C,IACzBa,EAAUlB,EAASK,GAChBhB,EAAoBhE,EAAE4F,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO7B,EAAoBS,EAAEC,IAG1B2B,EAAqBC,KAAiC,2BAAIA,KAAiC,4BAAK,GACpGD,EAAmBtG,QAAQ+F,EAAqBS,KAAK,KAAM,IAC3DF,EAAmBG,KAAOV,EAAqBS,KAAK,KAAMF,EAAmBG,KAAKD,KAAKF,K,GC7CvF,IAAII,EAAsBzC,EAAoBS,OAAEN,EAAW,CAAC,MAAM,IAAOH,EAAoB,OAC7FyC,EAAsBzC,EAAoBS,EAAEgC,I","sources":["webpack://yeppyshiba.com/webpack/runtime/chunk loaded","webpack://yeppyshiba.com/./src/app.ts","webpack://yeppyshiba.com/./src/enums/Animation.ts","webpack://yeppyshiba.com/./src/enums/Asset.ts","webpack://yeppyshiba.com/./src/enums/Pipeline.ts","webpack://yeppyshiba.com/./src/enums/Scene.ts","webpack://yeppyshiba.com/./src/enums/index.ts","webpack://yeppyshiba.com/./src/pipelines/PicoCRT.ts","webpack://yeppyshiba.com/./src/pipelines/index.ts","webpack://yeppyshiba.com/./src/properties/AssetQueue.ts","webpack://yeppyshiba.com/./src/properties/TextQueue.ts","webpack://yeppyshiba.com/./src/properties/index.ts","webpack://yeppyshiba.com/./src/scenes/LoaderScene.ts","webpack://yeppyshiba.com/./src/scenes/MainScene.ts","webpack://yeppyshiba.com/./src/scenes/index.ts","webpack://yeppyshiba.com/webpack/bootstrap","webpack://yeppyshiba.com/webpack/runtime/hasOwnProperty shorthand","webpack://yeppyshiba.com/webpack/runtime/jsonp chunk loading","webpack://yeppyshiba.com/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import 'phaser';\nimport { LoaderScene, MainScene } from '@/scenes';\nimport { PicoCRT } from '@/pipelines';\n\nclass Game extends Phaser.Game {\n    constructor() {\n        super(<Phaser.Types.Core.GameConfig>{\n            width: GAME_WIDTH,\n            height: GAME_HEIGHT,\n            type: Phaser.WEBGL,\n            parent: 'content',\n            physics: {\n                default: 'arcade',\n            },\n            scale: {\n                mode: Phaser.Scale.FIT,\n                autoCenter: Phaser.Scale.CENTER_BOTH\n            },\n            pipeline: {\n                PicoCRT\n            } as any,\n            scene: [\n                LoaderScene, \n                MainScene\n            ]\n        });\n    }\n}\n\nnew Game();","enum Animation {\n    SHIBA_WALK = 'shiba-walk'\n}\n\nexport default Animation;","enum Asset {\n    EIGHT_BIT_DETECTIVE = '8bit-detective',\n    ATARI_SMOOTH = 'atari-smooth',\n    BACK_BUILDINGS = 'back-builings',\n    FAR_BUILDINGS = 'far-builings',\n    FOREGROUND = 'foreground',\n    SHIBA = 'shiba'\n}\n\nexport default Asset;","enum Pipeline {\n    PICO_CRT = 'PicoCRT'\n}\n\nexport default Pipeline;","enum Scene {\n    LOADER_SCENE = 'loader-scene',\n    MAIN_SCENE = 'main-scene'\n}\n\nexport default Scene;","export { default as Animation } from './Animation';\nexport { default as Asset } from './Asset';\nexport { default as Pipeline } from './Pipeline';\nexport { default as Scene } from './Scene';","import { Pipeline } from \"@/enums\";\n\n// https://gist.github.com/morningtoast/bf1347b049280b655c939c8c0a52d261\nconst fragShader = `\nprecision mediump float;\n\nvarying vec2\t\toutTexCoord;\nuniform vec2\t\tu_canvasSize;\nuniform sampler2D\tu_texture;\n\n// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER\n//   by Timothy Lottes\n// https://www.shadertoy.com/view/XsjSzR\n//   modified (borked) by ultrabrite\n\n// Emulated input resolution.\nconst vec2 texSize = vec2(160.0, 90.0);\n\n// Hardness of scanline.\n//  -8.0 = soft\n// -16.0 = medium\nfloat hardScan = -16.0;\n\n// Hardness of pixels in scanline.\n// -2.0 = soft\n// -4.0 = hard\nconst float hardPix = -4.0;\n\n// Hardness of shadow mask in scanline.\n// 0.5 = hard\n// 3.0 = soft\nconst float hardMask = 3.0;\n\nconst vec3 compos = vec3(1.0 / 6.0, 1.0 / 2.0, 5.0 / 6.0);\n\n// Display warp.\n// 0.0 = none\n// 1.0/8.0 = extreme\nconst vec2 warp=vec2(1.5 / 24.0, 1.5 /24.0);\n\n//------------------------------------------------------------------------\n\n// Nearest emulated sample given floating point position and texel offset.\n// Also zero's off screen.\nvec3 Fetch(vec2 pos,vec2 off)\n{\n    pos=floor(pos * texSize + off) / texSize;\n    if (pos.x<0.0 || pos.x>=1.0 || pos.y<0.0 || pos.y>=1.0)\n        return vec3(0.0,0.0,0.0);\n    return texture2D(u_texture,pos.xy).rgb;\n}\n\n// Distance in emulated pixels to nearest texel.\nvec2 Dist(vec2 pos)\n{\n    pos=pos * texSize;\n    return -((pos-floor(pos))-vec2(0.5));\n}\n\n// 1D Gaussian.\nfloat Gaus(float pos,float scale)\n{\n    return exp2(scale*pos*pos);\n}\n\n// 3-tap Gaussian filter along horz line.\nvec3 Horz3(vec2 pos,float off)\n{\n    mat3 m=mat3(Fetch(pos,vec2(-1.0,off)),\n                Fetch(pos,vec2( 0.0,off)),\n                Fetch(pos,vec2( 1.0,off)));\n    float dst=Dist(pos).x;\n    // Convert distance to weight.\n    vec3 v=vec3(Gaus(dst-1.0,hardPix),\n                Gaus(dst+0.0,hardPix),\n                Gaus(dst+1.0,hardPix));\n        // Return filtered sample.\n        return (m*v)/(v.x+v.y+v.z);\n}\n\n// 5-tap Gaussian filter along horz line.\nvec3 Horz5(vec2 pos,float off)\n{\n    vec3 a = Fetch(pos, vec2(-2.0, off));\n    vec3 b = Fetch(pos, vec2(-1.0, off));\n    vec3 c = Fetch(pos, vec2(0.0, off));\n    vec3 d = Fetch(pos, vec2(1.0, off));\n    vec3 e = Fetch(pos, vec2(2.0, off));\n    \n    float dstx = Dist(pos).x;\n    \n    // Convert distance to weight.\n    float wa = Gaus(dstx - 2.0, hardPix);\n    float wb = Gaus(dstx - 1.0, hardPix);\n    float wc = Gaus(dstx + 0.0, hardPix);\n    float wd = Gaus(dstx + 1.0, hardPix);\n    float we = Gaus(dstx + 2.0, hardPix);\n    \n    // Return filtered sample.\n    return (a * wa + b * wb + c * wc + d * wd + e * we) / (wa + wb + wc + wd + we);\n}\n\n// Allow nearest three lines to effect pixel.\nvec3 Tri(vec2 pos)\n{\n    mat3 m = mat3(Horz3(pos, -1.0),\n                Horz5(pos, 0.0),\n                Horz3(pos, 1.0));\n\n    float dsty = Dist(pos).y;\n\n    vec3 v = vec3(Gaus(dsty - 1.0, hardScan),\n                Gaus(dsty + 0.0, hardScan),\n                Gaus(dsty + 1.0, hardScan));\n    return m*v;\n}\n\n// Distortion of scanlines, and end of screen alpha.\nvec2 Warp(vec2 pos)\n{\n    pos = pos * 2.0 - 1.0;\n    pos *= 1.0 + vec2(pos.y * pos.y, pos.x * pos.x) * warp;\n    return pos * 0.5 + 0.5;\n}\n\nvec3 Mask(float x)\n{\n    vec3 v  = clamp((fract(x) - compos) * hardMask, -1.0 / 3.0, 1.0 / 3.0);\n    return 2.0 / 3.0 + abs(v);\n}\n\nvoid main()\n{\n    gl_FragColor.rgb = Tri(Warp(outTexCoord.xy))*Mask(outTexCoord.x*texSize.x);\n    gl_FragColor.a = 1.0;\n}\n`;\n\nexport default class PicoCRT extends Phaser.Renderer.WebGL.Pipelines.PostFXPipeline {\n    constructor(game: Phaser.Game) {\n        super({\n            game,\n            name: Pipeline.PICO_CRT,\n            fragShader,\n        });\n    }\n}","export { default as PicoCRT } from './PicoCRT';","import { Asset } from '@/enums';\n\nexport type AssetQueueType = {\n    type: 'image' | 'audio',\n    name: string,\n    path: string\n} | {\n    type: 'spritesheet',\n    name: string,\n    path: string,\n    frameConfig: Phaser.Types.Loader.FileTypes.ImageFrameConfig\n} | {\n    type: 'bitmap-font',\n    name: string,\n    path: string,\n    fontData: string\n};\n\nexport default <AssetQueueType[]>[\n    {\n        type: 'image',\n        name: Asset.FAR_BUILDINGS,\n        path: 'assets/far-buildings.png'\n    },\n    {\n        type: 'image',\n        name: Asset.BACK_BUILDINGS,\n        path: 'assets/back-buildings.png'\n    },\n    {\n        type: 'image',\n        name: Asset.BACK_BUILDINGS,\n        path: 'assets/back-buildings.png'\n    },\n    {\n        type: 'image',\n        name: Asset.FOREGROUND,\n        path: 'assets/foreground.png'\n    },\n    {\n        type: 'spritesheet',\n        name: Asset.SHIBA,\n        path: 'assets/shiba.png',\n        frameConfig: {\n            frameWidth: 32, \n            frameHeight: 32\n        }\n    },\n    {\n        type: 'audio',\n        name: Asset.EIGHT_BIT_DETECTIVE,\n        path: 'assets/8bit-detective.mp3'\n    },\n    {\n        type: 'bitmap-font',\n        name: Asset.ATARI_SMOOTH,\n        path: 'assets/atari-smooth.png',\n        fontData: 'assets/atari-smooth.xml',\n    }\n];","export type TextQueueType = {\n    text: string,\n    ready: number,\n    appear: number,\n    hold: number,\n    disappear: number\n}\n\nexport default <TextQueueType[]>[\n    {\n        text: 'yeppyshiba.com',\n        ready: 1000,\n        appear: 2000,\n        hold: 2000,\n        disappear: 2000\n    },\n    {\n        text: \"PROUDLY\\nPRESENTS\",\n        ready: 1000,\n        appear: 2000,\n        hold: 4000,\n        disappear: 2000\n    },\n    {\n        text: \"Yeppy Shiba\\nGames\",\n        ready: 1000,\n        appear: 2000,\n        hold: 2000,\n        disappear: 2000\n    },\n    {\n        text: \"See you\\nsoon!\",\n        ready: 1000,\n        appear: 2000,\n        hold: 2000,\n        disappear: 2000\n    },\n];","export { default as AssetQueue } from './AssetQueue';\nexport { default as TextQueue } from './TextQueue';\n\nexport type { AssetQueueType } from './AssetQueue';\nexport type { TextQueueType } from './TextQueue';","import { Scene } from '@/enums';\nimport { AssetQueue } from '@/properties';\n\nexport default class LoaderScene extends Phaser.Scene {\n    constructor() {\n        super(Scene.LOADER_SCENE);\n    }\n\n    public preload(): void {\n        const width = 320;\n        const height = 50;\n\n        const progressBox = this.add.graphics();\n        progressBox.fillStyle(0x222222, 0.8);\n        progressBox.fillRect((GAME_WIDTH - width) / 2, (GAME_HEIGHT - height) / 2, width, height); // x,y, width, height: ;\n\n        const progressBar = this.add.graphics();\n\n        this.load.on('progress', (value: number) => {\n            progressBar.clear();\n            progressBar.fillStyle(0xffffff, 1);\n            progressBar.fillRect(((GAME_WIDTH - width) / 2) + 10, ((GAME_HEIGHT - height) / 2) + 10, (width - 20) * value, height - 20);\n        });\n\n        this.load.on('complete', () => {\n            this.scene.start(Scene.MAIN_SCENE);\n        });\n\n        AssetQueue.forEach(o => {\n            switch (o.type) {\n                case 'image':\n                    this.load.image(o.name, o.path);\n                    break;\n                case 'audio':\n                    this.load.audio(o.name, o.path);\n                    break;\n                case 'spritesheet':\n                    this.load.spritesheet(o.name, o.path, o.frameConfig);\n                    break;\n                case 'bitmap-font':\n                    this.load.bitmapFont(o.name, o.path, o.fontData);\n                    break;\n            }\n        });\n    }\n}","import { Animation, Asset, Pipeline, Scene } from '@/enums';\nimport { TextQueue, TextQueueType } from '@/properties';\n\nexport default class MainScene extends Phaser.Scene {\n    private scrollSpeed = 1;\n    private backgroundFar?: Phaser.GameObjects.TileSprite;\n    private backgroundBack?: Phaser.GameObjects.TileSprite;\n    private backgroundForeground?: Phaser.GameObjects.TileSprite;\n    private text?: Phaser.GameObjects.DynamicBitmapText;\n    private textOffset = 0;\n\n    constructor() {\n        super(Scene.MAIN_SCENE);\n    }\n\n    public create(): void {\n        this.addBackground();\n        this.addShiba();\n        this.addAudio();\n        this.addText();\n        this.addPipeline();   \n    }\n\n    public update(): void {\n        this.updateBackground();\n    }\n\n    private updateBackground(): void {\n        if (this.backgroundFar) this.backgroundFar.tilePositionX += this.scrollSpeed / 8;\n        if (this.backgroundBack) this.backgroundBack.tilePositionX += this.scrollSpeed / 6;\n        if (this.backgroundForeground) this.backgroundForeground.tilePositionX += this.scrollSpeed / 4;\n    }\n\n    private addPipeline(): void {\n        this.cameras.main.setPostPipeline(Pipeline.PICO_CRT);\n    }\n\n    private addText(): void {\n        this.text = this.add.dynamicBitmapText(GAME_WIDTH * 1.5, GAME_HEIGHT / 2, Asset.ATARI_SMOOTH)\n            .setText('')\n            .setFontSize(30)\n            .setOrigin(0.5, 0.5)\n            .setCenterAlign();\n\n        this.showText();\n    }\n\n    private showText(): void {\n        const queue = TextQueue[this.textOffset];\n        \n        this.tweens.timeline({\n            targets: this.text,\n            tweens: [\n                // ready\n                {\n                    x: GAME_WIDTH * 1.5,\n                    duration: queue.ready\n                },\n                // appear\n                {\n                    x: GAME_WIDTH / 2,\n                    duration: queue.appear\n                },\n                // hold\n                {\n                    x: GAME_WIDTH / 2,\n                    duration: queue.hold\n                },\n                // disappear\n                {\n                    x: GAME_WIDTH * -1,\n                    duration: queue.disappear\n                },\n            ],\n            onStart: () => {\n                if (this.text) this.text.setX(GAME_WIDTH * 1.5).setText(queue.text);\n            },\n            onComplete: () => {\n                if (this.text) {\n                    this.text.setX(GAME_WIDTH * -1);\n                    this.textOffset++;\n                    if (TextQueue.length <= this.textOffset) {\n                        this.textOffset = 0;\n                    }\n\n                    this.showText();\n                }\n            }\n        });\n    }\n\n    private addAudio(): void {\n        this.sound.play(Asset.EIGHT_BIT_DETECTIVE);\n    }\n\n    private addShiba(): void {\n        this.anims.create({\n            key: Animation.SHIBA_WALK,\n            frames: this.anims.generateFrameNumbers(Asset.SHIBA, { start: 4, end: 7, first: 4 }),\n            frameRate: 10,\n            repeat: -1\n        });\n\n        this.add.sprite(GAME_WIDTH / 2, GAME_HEIGHT - 64, Asset.SHIBA)\n            .play(Animation.SHIBA_WALK)\n            .setScale(4);\n    }\n\n    private addBackground(): void {\n        this.backgroundFar = this.addScaledBackground(Asset.FAR_BUILDINGS, 256, 192);\n        this.backgroundBack = this.addScaledBackground(Asset.BACK_BUILDINGS, 256, 192);\n        this.backgroundForeground = this.addScaledBackground(Asset.FOREGROUND, 352, 192)\n            .setY(GAME_HEIGHT / 40);\n    }\n\n    private addScaledBackground(asset: string, textureWidth: number, textureHeight: number): Phaser.GameObjects.TileSprite {\n        const scaledWidth = GAME_WIDTH / textureWidth;\n        const scaledHeight = GAME_HEIGHT / textureHeight;\n        const scaled = Math.min(scaledWidth, scaledHeight);\n\n        return this.add.tileSprite(0, 0, GAME_WIDTH, GAME_HEIGHT, asset)\n            .setScale(scaled)\n            .setOrigin(0.0, 0.0)\n    }\n}","export { default as LoaderScene } from './LoaderScene';\nexport { default as MainScene } from './MainScene';","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkyeppyshiba_com\"] = self[\"webpackChunkyeppyshiba_com\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(752)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Game","Phaser","constructor","super","width","height","type","WEBGL","parent","physics","default","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH","pipeline","PicoCRT","scene","LoaderScene","MainScene","Animation","Asset","Pipeline","Scene","Renderer","WebGL","Pipelines","PostFXPipeline","game","name","PICO_CRT","fragShader","FAR_BUILDINGS","path","BACK_BUILDINGS","FOREGROUND","SHIBA","frameConfig","frameWidth","frameHeight","EIGHT_BIT_DETECTIVE","ATARI_SMOOTH","fontData","text","ready","appear","hold","disappear","LOADER_SCENE","preload","progressBox","this","add","graphics","fillStyle","fillRect","progressBar","load","on","value","clear","start","MAIN_SCENE","AssetQueue","forEach","o","image","audio","spritesheet","bitmapFont","scrollSpeed","textOffset","create","addBackground","addShiba","addAudio","addText","addPipeline","update","updateBackground","backgroundFar","tilePositionX","backgroundBack","backgroundForeground","cameras","main","setPostPipeline","dynamicBitmapText","setText","setFontSize","setOrigin","setCenterAlign","showText","queue","TextQueue","tweens","timeline","targets","x","duration","onStart","setX","onComplete","length","sound","play","anims","key","SHIBA_WALK","frames","generateFrameNumbers","end","first","frameRate","repeat","sprite","setScale","addScaledBackground","setY","asset","textureWidth","textureHeight","scaledWidth","scaledHeight","scaled","Math","min","tileSprite","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","splice","r","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}